{"version":3,"sources":["m1.ts","网页笔记.ts"],"names":[],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAAA,IAAM,EAAE,MAAR,QAAA,EAAA;;AC8GP,aA9GA,IAAA,EAAA,QAAA,SAaA,WAMQ,IAAA,EAJJ,QAAQ,IAAI,EAAZ,GAKA,SAAS,iBAAiB,YAAa,SAAC,GACjC,EAAM,kBAAkB,cACvB,EA+EC,SAAS,GACV,IAAA,EAAmB,CAAC,GACjB,KAAoB,MAApB,EAAK,eACR,EAAK,EAAK,cACV,EAAK,KAAK,GAEP,OAAA,EArFI,CAAS,EAAM,QAgErB,SAAA,EAAQ,GACV,GAAuB,iBAAvB,EAAM,MAAM,QACX,OACJ,EAAM,MAAM,QAAQ,gBACpB,WAAW,WACJ,GAAO,EAAK,GAIf,EAAM,MAAM,QAAQ,GAHhB,EAAQ,IAId,KAzEE,CAAQ,EAAM,WAItB,SAAS,iBAAiB,UAAW,SAAC,GAC9B,IAAC,EAAM,QACP,OAAO,EACH,OAAA,EAAM,MACL,IAAA,OAsBQ,EAAK,GACX,aAAa,kBAAmB,QAC3C,IAtBQ,MACC,IAAA,YA6BT,EAAI,YAAY,EAAK,IACrB,EAAI,UAAU,GA5BN,MACC,IAAA,OACD,IACC,IAAA,OACD,QAAQ,IAAI,OAAO,GACnB,MACJ,QACW,OAAA,EAIR,OAFP,EAAM,iBACN,EAAM,aAAY,GACX,IAUL,IAAA,EAAI,SAAS,cAAc,OACjC,EAAI,MAAM,QAAQ,OAQZ,IAAA,EAAQ,SAAS,cAAc,SAO5B,SAAA,IAIA,IAFD,IAAA,EAEK,EAAQ,EAAG,EAAQ,EAAK,OAAS,KACtC,EAAQ,EAAK,GAAO,aAAa,UADQ,KAK7C,EAAM,aAAa,QAAS,GAC5B,EAAM,SACN,SAAS,YAAY,QAjBzB,EAAM,aAAa,OAAQ,UAC3B,EAAM,aAAa,WAAY,YAC/B,SAAS,KAAK,YAAY,GAxD9B","file":"网页笔记.js","sourceRoot":"..\\网页笔记","sourcesContent":["export const a=\"999\"","import { a } from \"./m1\";\r\n\r\n// ==UserScript==\r\n// @name         网页文本编辑,做笔记的好选择\r\n// @namespace    http://tampermonkey.net/\r\n// @version      0.17\r\n// @description  所见即所得！\r\n// @author       You\r\n// @match        *\r\n// @include      *\r\n// @grant        none\r\n// ==/UserScript==\r\n\r\n(function() {\r\n    'use strict';\r\n    console.log(a);\r\n\r\n    //对本地打开的网页的修改貌似无法保存......\r\n    //获取鼠标位置\r\n    let path:HTMLElement[];\r\n    document.addEventListener('mouseover', (event) => {\r\n        if(event.target instanceof HTMLElement){\r\n            path = nodePath(event.target);\r\n            outline(event.target)\r\n        }\r\n    });\r\n    //监测 shift+?事件\r\n    document.addEventListener('keydown', (event) => {\r\n        if (!event.ctrlKey)\r\n            return false;\r\n        switch (event.code) {\r\n            case 'KeyQ':\r\n                editSelect()\r\n                break;\r\n            case 'Backspace':\r\n                deleteSelect()\r\n                break;\r\n            case 'KeyC'://c\r\n                copyTitle()//复制title  这里不加break是为了不影响正常的复制行为\r\n            case \"KeyW\"://w\r\n                console.log(\"path\",path)\r\n                break;\r\n            default:\r\n                return true\r\n        }//屏蔽浏览器对于这些快捷键的响应避免一些奇奇怪怪的操作\r\n        event.preventDefault()\r\n        event.returnValue=false;\r\n        return false;\r\n    });\r\n    /**\r\n     * 设置元素可编辑并获取 逐级向上获取titile\r\n     */\r\n    function editSelect(){\r\n        let selectElem = path[0]\r\n        selectElem.setAttribute(\"contenteditable\", \"true\");\r\n        copyTitle()\r\n    }\r\n    const div=document.createElement('div');\r\n    div.style.display=\"none\";\r\n    /**\r\n     * 移除选中的元素 不使用remove 是因为这个方法并没有真正删除\r\n     */\r\n    function deleteSelect() {\r\n        div.appendChild(path[0]);\r\n        div.innerHTML=\"\"\r\n    }\r\n    const input = document.createElement('input');\r\n    input.setAttribute('type', 'hidden');\r\n    input.setAttribute('readonly', 'readonly');\r\n    document.body.appendChild(input);\r\n     /**\r\n     * 设置一个影藏的文本框用来复制文本\r\n     */\r\n    function copyTitle() {\r\n        //获取元素的描述并将他们添加到剪贴板  目前支持mdn 其它的可能支持\r\n        var title\r\n        //这里抛弃后两个元素是因为他们不是一般的elem元素了\r\n        for (let index = 0; index < path.length - 2; index++) {\r\n            title = path[index].getAttribute(\"title\");\r\n            if (title)\r\n                break\r\n        }\r\n        input.setAttribute('value', title as string);\r\n        input.select();\r\n        document.execCommand('copy');//复制\r\n    }\r\n    function outline(elemt:HTMLElement){\r\n        if(elemt.style.outline == \"2px solid red\")\r\n            return\r\n        elemt.style.outline=\"2px solid red\"\r\n        setTimeout(()=>{\r\n            if(elemt==path[0]){\r\n                outline(elemt)\r\n                return\r\n            }\r\n            elemt.style.outline=\"\"\r\n        },500)\r\n    }\r\n    /**\r\n     * 获取一个元素的所有父节点到html为止\r\n     */\r\n    function nodePath(node:HTMLElement):HTMLElement[]{\r\n        let path:HTMLElement[]=[node]\r\n        while (node.parentElement!=null) {\r\n            node=node.parentElement\r\n            path.push(node)\r\n        }\r\n        return path\r\n    }\r\n})();\r\n/*\r\n# 使网页可编辑\r\n* 将鼠标移动到你要修改的文本上方 按下 ctrl+q 就会将该元素设为可编辑，并且复制它的title到剪贴板中\r\n*                               按下 ctrl+ Backspace （删除键） 就会删除该元素\r\n*                               按下 ctrl+c 会将元素的title（一般为该元素描述）复制到剪贴板（如果存在的话）\r\n## 为什么要开发这样一个插件?\r\n* 这源于我一次在看mdn文档时,想要做笔记,正打算和以前一样将网页复制进word中添加笔记等等\r\n* 突然察觉我为什么要多此一举?\r\n* 直接在网页中写笔记不好吗\r\n* 所以有了这个插件,你可以利用这个插件来修改网页上的文本,然后按下ctrl+s将这些改动永久保存在本地\r\n* 建议允许插件在文件地址上运行\r\n## v0.17 的更新介绍\r\n* 这次主要是修改了逻辑，更加优雅，还有添加了红边框能更清楚的知道到底是再对那个元素进行了操作\r\n*/"]}